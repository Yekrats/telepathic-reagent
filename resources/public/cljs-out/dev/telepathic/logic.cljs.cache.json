["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$telepathic.logic","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$any-rc-match?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","~:line",66,"~:column",7,"~:end-line",66,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^G",[["~$s"]]]]],"~:doc","Do any row or column have a matching set [s] of 3?"],"^5","~$telepathic.logic/any-rc-match?","^A","src/telepathic/logic.cljs","^E",20,"~:method-params",["^G",[["~$s"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"~:variadic?",false,"^B",66,"~:ret-tag","~$any","^D",66,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","Do any row or column have a matching set [s] of 3?"],"~$any-col-match?",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",61,"^C",7,"^D",61,"^E",21,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","The same as any-row-match? function, but performing a 90째 rotation first,\n  to capture columns."],"^5","~$telepathic.logic/any-col-match?","^A","src/telepathic/logic.cljs","^E",21,"^K",["^G",[["~$s"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",61,"^O",["^4",["^P","~$clj-nil"]],"^D",61,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","The same as any-row-match? function, but performing a 90째 rotation first,\n  to capture columns."],"~$shapes",["^ ","^5","~$telepathic.logic/shapes","^A","src/telepathic/logic.cljs","^B",21,"^C",1,"^D",21,"^E",12,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",21,"^C",6,"^D",21,"^E",12],"~:tag","~$cljs.core/IVector"],"~$condition-cards",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",29,"^C",7,"^D",29,"^E",22,"^F",["^G",["^H",["^G",[["~$cards"]]]]]],"^5","~$telepathic.logic/condition-cards","^A","src/telepathic/logic.cljs","^E",22,"^K",["^G",[["^["]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",29,"^O","~$clj","^D",29,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["^["]]]]]],"~$asset-name",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",116,"^C",7,"^D",116,"^E",17,"^F",["^G",["^H",["^G",[[["~$c","~$s"]]]]]],"^I","Takes in a key-pair (color & shape). Returns the name of the asset."],"^5","~$telepathic.logic/asset-name","^A","src/telepathic/logic.cljs","^E",17,"^K",["^G",[["~$p__9806"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",116,"^O","~$string","^D",116,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[[["~$c","~$s"]]]]]],"^I","Takes in a key-pair (color & shape). Returns the name of the asset."],"~$sls",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",70,"^C",7,"^D",70,"^E",10,"^F",["^G",["^H",["^G",[[]]]]],"^I","A shuffled-legal-start of the tiles."],"^5","~$telepathic.logic/sls","^A","src/telepathic/logic.cljs","^E",10,"^K",["^G",[[]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",70,"^O",["^4",["^P","~$number"]],"^D",70,"^Q",0,"^R",true,"^F",["^G",["^H",["^G",[[]]]]],"^I","A shuffled-legal-start of the tiles."],"~$draw-action",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",102,"^C",7,"^D",102,"^E",18,"^F",["^G",["^H",["^G",[["~$state"]]]]],"^I","Take the top card from the action deck of the game state (state), and put it on the bottom\n  of the available pile.  Returns the new state."],"^5","~$telepathic.logic/draw-action","^A","src/telepathic/logic.cljs","^E",18,"^K",["^G",[["^1:"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",102,"^O",["^4",["^11","^P"]],"^D",102,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["^1:"]]]]],"^I","Take the top card from the action deck of the game state (state), and put it on the bottom\n  of the available pile.  Returns the new state."],"~$initiate-actions",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",78,"^C",7,"^D",78,"^E",23,"^F",["^G",["^H",["^G",[[]]]]]],"^5","~$telepathic.logic/initiate-actions","^A","src/telepathic/logic.cljs","^E",23,"^K",["^G",[[]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",78,"^O","~$cljs.core/IMap","^D",78,"^Q",0,"^R",true,"^F",["^G",["^H",["^G",[[]]]]]],"~$any-row-match?",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",54,"^C",7,"^D",54,"^E",21,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","Performs check4 function, taking the first row '(take 4 s)', then calling\n  itself recursively until all are taken."],"^5","~$telepathic.logic/any-row-match?","^A","src/telepathic/logic.cljs","^E",21,"^K",["^G",[["~$s"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",54,"^O",["^4",["^P","^U"]],"^D",54,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","Performs check4 function, taking the first row '(take 4 s)', then calling\n  itself recursively until all are taken."],"~$colors",["^ ","^5","~$telepathic.logic/colors","^A","src/telepathic/logic.cljs","^B",19,"^C",1,"^D",19,"^E",12,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",19,"^C",6,"^D",19,"^E",12],"^X","^Y"],"~$check4",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",38,"^C",7,"^D",38,"^E",13,"^F",["^G",["^H",["^G",[["~$set"]]]]],"^I","Take in a set of 4 paired items.\n  Check to see if any 3 contiguous items have a matching pattern in any color or shape.\n  Returns nil if nothing found, or returns the matching color or shape."],"^5","~$telepathic.logic/check4","^A","src/telepathic/logic.cljs","^E",13,"^K",["^G",[["^1D"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",38,"^O",["^4",["^P","^U"]],"^D",38,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["^1D"]]]]],"^I","Take in a set of 4 paired items.\n  Check to see if any 3 contiguous items have a matching pattern in any color or shape.\n  Returns nil if nothing found, or returns the matching color or shape."],"~$actions",["^ ","^5","~$telepathic.logic/actions","^A","src/telepathic/logic.cljs","^B",23,"^C",1,"^D",23,"^E",13,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",23,"^C",6,"^D",23,"^E",13],"^X","^Y"],"~$rot-90",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",49,"^C",7,"^D",49,"^E",13,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","Takes a sequence of 16 color/shape pairs and rotates it 90째."],"^5","~$telepathic.logic/rot-90","^A","src/telepathic/logic.cljs","^E",13,"^K",["^G",[["~$s"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",49,"^O",["^4",["^11","^Y","^P","~$cljs.core/MetaFn","^U"]],"^D",49,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["~$s"]]]]],"^I","Takes a sequence of 16 color/shape pairs and rotates it 90째."],"~$all-match?",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",32,"^C",7,"^D",32,"^E",17,"^F",["^G",["^H",["^G",[["^1D"]]]]],"^I","Checks all the members of a set. If all match, return that value. Otherwise return nil."],"^5","~$telepathic.logic/all-match?","^A","src/telepathic/logic.cljs","^E",17,"^K",["^G",[["^1D"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",32,"^O",["^4",["^P","^U"]],"^D",32,"^Q",1,"^R",true,"^F",["^G",["^H",["^G",[["^1D"]]]]],"^I","Checks all the members of a set. If all match, return that value. Otherwise return nil."],"~$testdata",["^ ","^5","~$telepathic.logic/testdata","^A","src/telepathic/logic.cljs","^B",5,"^C",1,"^D",5,"^E",14,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",5,"^C",6,"^D",5,"^E",14],"^X","^1>"],"~$remove-action",["^ ","^?",null,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",85,"^C",7,"^D",85,"^E",20,"^F",["^G",["^H",["^G",[["^1:","~$key"]]]]],"^I","An action (key) is moved from the available area to the\n  discard pile of game-state (state). Returns the state, with the\n  key card moved to the discard pile."],"^5","~$telepathic.logic/remove-action","^A","src/telepathic/logic.cljs","^E",20,"^K",["^G",[["^1:","^1P"]]],"^L",null,"^M",["^G",[null,null]],"^C",1,"^N",false,"^B",85,"^O",["^4",[null,"^11","^P"]],"^D",85,"^Q",2,"^R",true,"^F",["^G",["^H",["^G",[["^1:","^1P"]]]]],"^I","An action (key) is moved from the available area to the\n  discard pile of game-state (state). Returns the state, with the\n  key card moved to the discard pile."],"~$players",["^ ","^5","~$telepathic.logic/players","^A","src/telepathic/logic.cljs","^B",17,"^C",1,"^D",17,"^E",13,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",17,"^C",6,"^D",17,"^E",13],"^X","^Y"],"~$tiles",["^ ","^5","~$telepathic.logic/tiles","^A","src/telepathic/logic.cljs","^B",27,"^C",1,"^D",27,"^E",11,"^@",["^ ","^A","/Users/scotto/code/personal/clojure-lunch-bytes/telepathic/src/telepathic/logic.cljs","^B",27,"^C",6,"^D",27,"^E",11],"^X",["^4",["^11","^Y","^P","^1J","^U"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:corner-counterclockwise","~:orange","~:shape-player","~:deck","~:green","~:ew-reverse","~:bacon","~:circle","~:col-south","~:lose","~:col-north","~:ew-do-si-do","~:star","~:row-east","~:actions","~:ns-do-si-do","~:color-player","~:blue","~:ns-reverse","~:plus","~:discard","~:available","~:purple","~:cross","~:row-west","~:board","~:win","~:corner-clockwise"]],"~:order",["^2>","^20","^2G","^2<","^2H","^27","^2D","^22","^24","^2:","^2?","^25","^2A","^1[","^2C","^21","^2B","^28","^23","^1Z","^2;","^2F","^26","^2=","^2@","^29","^2I","^2E"]],"^I",null]